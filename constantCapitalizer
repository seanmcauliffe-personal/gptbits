import ast
import astunparse
import os

class ConstantToUppercase(ast.NodeTransformer):
    def __init__(self):
        # Initial sets for tracking constant and assigned variables
        self.constants = set()
        self.assigned = set()

    def visit_Assign(self, node):
        """
        Check assignments. If the variable is assigned a function call, 
        it's considered as a variable and not a constant.
        """
        # Check if the assigned value is a result of a function call
        if isinstance(node.value, ast.Call):
            for target in node.targets:
                if isinstance(target, ast.Name):
                    # If it was previously marked as a constant, remove it from the set
                    self.constants.discard(target.id)
                    # Add it to the set of assigned variables
                    self.assigned.add(target.id)
        else:
            # If not a function call, continue as before
            for target in node.targets:
                if isinstance(target, ast.Name) and target.id not in self.assigned:
                    self.constants.add(target.id)
                elif isinstance(target, ast.Name):
                    self.constants.discard(target.id)
                self.assigned.add(target.id)

        return self.generic_visit(node)

    def visit_Name(self, node):
        """
        Change constant variables to uppercase
        """
        if isinstance(node.ctx, ast.Load) and node.id in self.constants:
            node.id = node.id.upper()
        return node


def process_directory(dir_path):
    """
    Process all .py files in the given directory and its subdirectories
    """
    # Walk through all files in the directory
    for dirpath, dirnames, filenames in os.walk(dir_path):
        for filename in filenames:
            if filename.endswith(".py"):
                file_path = os.path.join(dirpath, filename)
                process_file(file_path)


def process_file(file_path):
    """
    Process a single .py file: parse the file, transform constant variable names,
    and write the updated code back to the file
    """
    with open(file_path, "r") as source:
        tree = ast.parse(source.read())

    transformer = ConstantToUppercase()
    transformer.visit(tree)

    new_code = astunparse.unparse(tree)

    with open(file_path, "w") as source:
        source.write(new_code)


if __name__ == "__main__":
    # Replace this with the path to your directory
    process_directory("/path/to/your/directory")
